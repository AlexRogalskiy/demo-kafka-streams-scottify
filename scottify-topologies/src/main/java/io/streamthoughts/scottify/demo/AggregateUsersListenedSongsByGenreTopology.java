/*
 * Copyright 2020 StreamThoughts.
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.streamthoughts.scottify.demo;

import io.streamthoughts.azkarra.api.annotations.Component;
import io.streamthoughts.azkarra.api.annotations.TopologyInfo;
import io.streamthoughts.azkarra.api.monad.Tuple;
import io.streamthoughts.azkarra.api.streams.TopologyProvider;
import io.streamthoughts.azkarra.commons.error.SafeSerdes;
import io.streamthoughts.kafka.datagen.scottify.domain.Album;
import io.streamthoughts.kafka.datagen.scottify.domain.User;
import io.streamthoughts.kafka.datagen.scottify.domain.UserEvent;
import io.streamthoughts.kafka.datagen.scottify.domain.UserEventType;
import io.streamthoughts.kafka.datagen.scottify.serdes.JsonDeserializer;
import io.streamthoughts.kafka.datagen.scottify.serdes.JsonSerializer;
import io.streamthoughts.scottify.demo.model.SongListenedEvent;
import io.streamthoughts.scottify.demo.model.UserListenedSongsByGenre;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.utils.Bytes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.GlobalKTable;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.KGroupedStream;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.kstream.Named;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.state.KeyValueStore;
import org.jetbrains.annotations.NotNull;

@Component
@javax.inject.Named("AggregateUsersListenedSongsByGenreTopology")
@TopologyInfo(description = "Scottify - Aggregate for each user the total number of listened songs by genre")
public class AggregateUsersListenedSongsByGenreTopology implements TopologyProvider {

    /**
     * {@inheritDoc}
     */
    @Override
    public String version() {
        return Version.getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Topology get() {

        // Topology definition
        StreamsBuilder builder = new StreamsBuilder();

        // Create all GlobalKTables for albums and users.
        GlobalKTable<String, Album> albums = createGlobalKTable(
                builder, "db-albums", "Albums", Album.class);
        GlobalKTable<String, User> users = createGlobalKTable(
                builder, "db-users", "Users", User.class);

        // Consumer events generated by user activity.
        KStream<String, UserEvent> allUserEvents = builder
            .stream("events-user-activity", consumeEarliestWithValueSerde(newJsonSerde(UserEvent.class, true)));

        KStream<String, SongListenedEvent> songListenedEvents = allUserEvents
                .filter((k, v) -> v != null) /// Filter sentinel value from SafeDeserializer.
                .filter((userId, event) -> event.isOfType(UserEventType.MUSIC_LISTEN_START), Named.as("filter-listen-event"))
                .mapValues(SongListenedEvent::parseEventPayload, Named.as("read-event-payload"));

        // Joins events with Users and Albums.
        KGroupedStream<String, Tuple<User, Album>> groupedStreams = songListenedEvents
                .join(users, (userId, event) -> userId, Tuple::of, Named.as("lookup-user-name-by-id"))
                .join(albums, (userId, tuple) -> tuple.left().album, (tuple, album) -> Tuple.of(tuple.right(), album), Named.as("lookup-album-genre-by-name"))
                .groupByKey(Grouped.as("group-by-user-id"));

        // Finally, per user, count the number of musics listen per genre.
        KTable<String, UserListenedSongsByGenre> count = groupedStreams.aggregate(
                UserListenedSongsByGenre::new,  /* initializer */
                (userId, tuple, aggregate) -> aggregate.update(tuple.left(), tuple.right()), /* aggregator */
                Named.as("count-user-listened-songs-by-genre"),
                Materialized.<String, UserListenedSongsByGenre, KeyValueStore<Bytes, byte[]> /* materialized store */>
                        as("UserListenedSongsByGenre")
                        .withValueSerde(newJsonSerde(UserListenedSongsByGenre.class))
        );

        count.toStream()
             .to("agg-listened-genres-by-user", Produced.with(Serdes.String(), newJsonSerde(UserListenedSongsByGenre.class)));


        return builder.build();
    }

    private <T> Consumed<String, T> consumeEarliestWithValueSerde(final Serde<T> valueSerde) {
        return Consumed
            .with(Serdes.String(), valueSerde)
            .withOffsetResetPolicy(Topology.AutoOffsetReset.EARLIEST);
    }

    private <T> GlobalKTable<String, T> createGlobalKTable(final StreamsBuilder builder,
                                                           final String sourceTopic,
                                                           final String storeName,
                                                           final Class<T> type) {
        Consumed<String, T> consumed = Consumed
            .with(Serdes.String(), newJsonSerde(type))
            .withOffsetResetPolicy(Topology.AutoOffsetReset.EARLIEST);

        return builder.globalTable(sourceTopic, consumed, Materialized.as(storeName));
    }

    @NotNull
    private <T> Serde<T> newJsonSerde(final Class<T> type) {
        return newJsonSerde(type, false);
    }

    @NotNull
    private <T> Serde<T> newJsonSerde(final Class<T> type, final boolean safe) {
        Serde<T> serde = Serdes.serdeFrom(new JsonSerializer<>(), new JsonDeserializer<>(type));
        return safe ? SafeSerdes.serdeFrom(serde, null) : serde;
    }
}
